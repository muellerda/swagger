/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package swaggerdemo.restapi.implementation;

import swaggerdemo.restapi.TodoAPI;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import swaggerdemo.restapi.models.TodoItem;

/**
 * Initializes a new instance of the TodoAPI class.
 */
public class TodoAPIImpl extends ServiceClient implements TodoAPI {
    /**
     * The Retrofit service to perform REST calls.
     */
    private TodoAPIService service;

    /**
     * Initializes an instance of TodoAPI client.
     */
    public TodoAPIImpl() {
        this("https://");
    }

    /**
     * Initializes an instance of TodoAPI client.
     *
     * @param baseUrl the base URL of the host
     */
    public TodoAPIImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of TodoAPI client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public TodoAPIImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of TodoAPI client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public TodoAPIImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of TodoAPI client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public TodoAPIImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(TodoAPIService.class);
    }

    /**
     * The interface defining all the services for TodoAPI to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TodoAPIService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiTodoGet" })
        @GET("api/Todo")
        Observable<Response<ResponseBody>> apiTodoGet();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiTodoPost" })
        @POST("api/Todo")
        Observable<Response<ResponseBody>> apiTodoPost(@Query("Id") Long id, @Query("Name") String name, @Query("IsComplete") Boolean isComplete);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiTodoByIdPut" })
        @PUT("api/Todo/{id}")
        Observable<Response<ResponseBody>> apiTodoByIdPut(@Path("id") long id, @Query("Id") long id1, @Query("Name") String name, @Query("IsComplete") Boolean isComplete);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiTodoByIdDelete" })
        @HTTP(path = "api/Todo/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> apiTodoByIdDelete(@Path("id") long id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiValuesGet" })
        @GET("api/Values")
        Observable<Response<ResponseBody>> apiValuesGet();

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiValuesPost" })
        @POST("api/Values")
        Observable<Response<ResponseBody>> apiValuesPost(@Body String value);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiValuesByIdGet" })
        @GET("api/Values/{id}")
        Observable<Response<ResponseBody>> apiValuesByIdGet(@Path("id") int id);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiValuesByIdPut" })
        @PUT("api/Values/{id}")
        Observable<Response<ResponseBody>> apiValuesByIdPut(@Path("id") int id, @Body String value);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: swaggerdemo.restapi.TodoAPI apiValuesByIdDelete" })
        @HTTP(path = "api/Values/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> apiValuesByIdDelete(@Path("id") int id);

    }

    /**
     * Get all todo items.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;TodoItem&gt; object if successful.
     */
    public List<TodoItem> apiTodoGet() {
        return apiTodoGetWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get all todo items.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TodoItem>> apiTodoGetAsync(final ServiceCallback<List<TodoItem>> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoGetWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get all todo items.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TodoItem&gt; object
     */
    public Observable<List<TodoItem>> apiTodoGetAsync() {
        return apiTodoGetWithServiceResponseAsync().map(new Func1<ServiceResponse<List<TodoItem>>, List<TodoItem>>() {
            @Override
            public List<TodoItem> call(ServiceResponse<List<TodoItem>> response) {
                return response.body();
            }
        });
    }

    /**
     * Get all todo items.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TodoItem&gt; object
     */
    public Observable<ServiceResponse<List<TodoItem>>> apiTodoGetWithServiceResponseAsync() {
        return service.apiTodoGet()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<TodoItem>>>>() {
                @Override
                public Observable<ServiceResponse<List<TodoItem>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<TodoItem>> clientResponse = apiTodoGetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<TodoItem>> apiTodoGetDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<TodoItem>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<TodoItem>>() { }.getType())
                .build(response);
    }

    /**
     * Creates a todo item.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiTodoPost() {
        apiTodoPostWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Creates a todo item.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiTodoPostAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoPostWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Creates a todo item.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiTodoPostAsync() {
        return apiTodoPostWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a todo item.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiTodoPostWithServiceResponseAsync() {
        final Long id = null;
        final String name = null;
        final Boolean isComplete = null;
        return service.apiTodoPost(id, name, isComplete)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiTodoPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a todo item.
     *
     * @param id the Long value
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiTodoPost(Long id, String name, Boolean isComplete) {
        apiTodoPostWithServiceResponseAsync(id, name, isComplete).toBlocking().single().body();
    }

    /**
     * Creates a todo item.
     *
     * @param id the Long value
     * @param name the String value
     * @param isComplete the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiTodoPostAsync(Long id, String name, Boolean isComplete, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoPostWithServiceResponseAsync(id, name, isComplete), serviceCallback);
    }

    /**
     * Creates a todo item.
     *
     * @param id the Long value
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiTodoPostAsync(Long id, String name, Boolean isComplete) {
        return apiTodoPostWithServiceResponseAsync(id, name, isComplete).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a todo item.
     *
     * @param id the Long value
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiTodoPostWithServiceResponseAsync(Long id, String name, Boolean isComplete) {
        return service.apiTodoPost(id, name, isComplete)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiTodoPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiTodoPostDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiTodoByIdPut(long id, long id1) {
        apiTodoByIdPutWithServiceResponseAsync(id, id1).toBlocking().single().body();
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiTodoByIdPutAsync(long id, long id1, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoByIdPutWithServiceResponseAsync(id, id1), serviceCallback);
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiTodoByIdPutAsync(long id, long id1) {
        return apiTodoByIdPutWithServiceResponseAsync(id, id1).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiTodoByIdPutWithServiceResponseAsync(long id, long id1) {
        final String name = null;
        final Boolean isComplete = null;
        return service.apiTodoByIdPut(id, id1, name, isComplete)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiTodoByIdPutDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiTodoByIdPut(long id, long id1, String name, Boolean isComplete) {
        apiTodoByIdPutWithServiceResponseAsync(id, id1, name, isComplete).toBlocking().single().body();
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @param name the String value
     * @param isComplete the Boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiTodoByIdPutAsync(long id, long id1, String name, Boolean isComplete, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoByIdPutWithServiceResponseAsync(id, id1, name, isComplete), serviceCallback);
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiTodoByIdPutAsync(long id, long id1, String name, Boolean isComplete) {
        return apiTodoByIdPutWithServiceResponseAsync(id, id1, name, isComplete).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the todo item by given id and item.
     *
     * @param id The identifier.
     * @param id1 The identifier.
     * @param name the String value
     * @param isComplete the Boolean value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiTodoByIdPutWithServiceResponseAsync(long id, long id1, String name, Boolean isComplete) {
        return service.apiTodoByIdPut(id, id1, name, isComplete)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiTodoByIdPutDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiTodoByIdPutDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Deletes the todo item by specified id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiTodoByIdDelete(long id) {
        apiTodoByIdDeleteWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Deletes the todo item by specified id.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiTodoByIdDeleteAsync(long id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiTodoByIdDeleteWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Deletes the todo item by specified id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiTodoByIdDeleteAsync(long id) {
        return apiTodoByIdDeleteWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the todo item by specified id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiTodoByIdDeleteWithServiceResponseAsync(long id) {
        return service.apiTodoByIdDelete(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiTodoByIdDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiTodoByIdDeleteDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> apiValuesGet() {
        return apiValuesGetWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> apiValuesGetAsync(final ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesGetWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Observable<List<String>> apiValuesGetAsync() {
        return apiValuesGetWithServiceResponseAsync().map(new Func1<ServiceResponse<List<String>>, List<String>>() {
            @Override
            public List<String> call(ServiceResponse<List<String>> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Observable<ServiceResponse<List<String>>> apiValuesGetWithServiceResponseAsync() {
        return service.apiValuesGet()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<String>>>>() {
                @Override
                public Observable<ServiceResponse<List<String>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<String>> clientResponse = apiValuesGetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<String>> apiValuesGetDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<String>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<String>>() { }.getType())
                .build(response);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiValuesPost() {
        apiValuesPostWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiValuesPostAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesPostWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiValuesPostAsync() {
        return apiValuesPostWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiValuesPostWithServiceResponseAsync() {
        final String value = null;
        return service.apiValuesPost(value)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiValuesPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     *
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiValuesPost(String value) {
        apiValuesPostWithServiceResponseAsync(value).toBlocking().single().body();
    }

    /**
     *
     * @param value the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiValuesPostAsync(String value, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesPostWithServiceResponseAsync(value), serviceCallback);
    }

    /**
     *
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiValuesPostAsync(String value) {
        return apiValuesPostWithServiceResponseAsync(value).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiValuesPostWithServiceResponseAsync(String value) {
        return service.apiValuesPost(value)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiValuesPostDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiValuesPostDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String apiValuesByIdGet(int id) {
        return apiValuesByIdGetWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> apiValuesByIdGetAsync(int id, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesByIdGetWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> apiValuesByIdGetAsync(int id) {
        return apiValuesByIdGetWithServiceResponseAsync(id).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> apiValuesByIdGetWithServiceResponseAsync(int id) {
        return service.apiValuesByIdGet(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = apiValuesByIdGetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> apiValuesByIdGetDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<String, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiValuesByIdPut(int id) {
        apiValuesByIdPutWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiValuesByIdPutAsync(int id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesByIdPutWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiValuesByIdPutAsync(int id) {
        return apiValuesByIdPutWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiValuesByIdPutWithServiceResponseAsync(int id) {
        final String value = null;
        return service.apiValuesByIdPut(id, value)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiValuesByIdPutDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     *
     * @param id the int value
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiValuesByIdPut(int id, String value) {
        apiValuesByIdPutWithServiceResponseAsync(id, value).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param value the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiValuesByIdPutAsync(int id, String value, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesByIdPutWithServiceResponseAsync(id, value), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiValuesByIdPutAsync(int id, String value) {
        return apiValuesByIdPutWithServiceResponseAsync(id, value).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @param value the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiValuesByIdPutWithServiceResponseAsync(int id, String value) {
        return service.apiValuesByIdPut(id, value)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiValuesByIdPutDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiValuesByIdPutDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void apiValuesByIdDelete(int id) {
        apiValuesByIdDeleteWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> apiValuesByIdDeleteAsync(int id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(apiValuesByIdDeleteWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> apiValuesByIdDeleteAsync(int id) {
        return apiValuesByIdDeleteWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> apiValuesByIdDeleteWithServiceResponseAsync(int id) {
        return service.apiValuesByIdDelete(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = apiValuesByIdDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> apiValuesByIdDeleteDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
